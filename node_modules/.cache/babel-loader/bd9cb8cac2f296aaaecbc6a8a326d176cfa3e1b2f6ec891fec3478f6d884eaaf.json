{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { createStore } from 'vuex';\nexport default createStore({\n  state() {\n    return {\n      tasks: [{\n        id: 1,\n        text: 'Закончить проект',\n        completed: false,\n        subtasks: [{\n          id: 1,\n          text: \"Создать компоненты\",\n          completed: true\n        }, {\n          id: 2,\n          text: \"Написать тесты\",\n          completed: false\n        }]\n      }, {\n        id: 2,\n        text: 'Купить продукты',\n        completed: true,\n        subtasks: [{\n          id: 1,\n          text: \"Хлеб\",\n          completed: true\n        }, {\n          id: 2,\n          text: \"Молоко\",\n          completed: false\n        }, {\n          id: 3,\n          text: \"Яйца\",\n          completed: true\n        }]\n      }],\n      add_task: '',\n      filter: 'all'\n    };\n  },\n  getters: {\n    showTasks: state => state.tasks\n  },\n  mutations: {\n    ADD_TASK(state, taskText) {\n      const newTask = {\n        id: Date.now(),\n        text: taskText.trim(),\n        completed: false,\n        subtasks: []\n      };\n      if (newTask.text) state.tasks.push(newTask);\n    },\n    ADD_SUBTASK(state, {\n      taskId,\n      subtaskText\n    }) {\n      const newSubtask = {\n        id: Date.now(),\n        text: subtaskText.trim(),\n        completed: false\n      };\n      const currentTask = state.tasks.find(task => task.id === taskId);\n      if (newSubtask.text && currentTask) {\n        currentTask.subtasks.push(newSubtask);\n      }\n      update_tasks_checked_state(state, currentTask);\n    },\n    DELETE_TASK(state, taskId) {\n      state.tasks = state.tasks.filter(task => task.id !== taskId);\n    },\n    DELETE_SUBTASK(state, {\n      taskId,\n      subtaskId\n    }) {\n      const task = state.tasks.find(task => task.id === taskId);\n      if (task) {\n        task.subtasks = task.subtasks.filter(s => s.id !== subtaskId);\n      }\n      update_tasks_checked_state(state, task);\n    },\n    UPDATE_TASK_CHECKED(state, taskId) {\n      const task = state.tasks.find(t => t.id === taskId);\n      if (task) {\n        task.completed = !task.completed;\n        update_subtasks_checked_state(state, task);\n      }\n    },\n    UPDATE_SUBTASK_CHECKED(state, {\n      taskId,\n      subtaskId\n    }) {\n      const task = state.tasks.find(task => task.id === taskId);\n      if (!task) return;\n      const subtask = task.subtasks.find(t => t.id === subtaskId);\n      if (subtask) subtask.completed = !subtask.completed;\n      update_tasks_checked_state(state, task);\n    }\n  }\n});\nconst update_subtasks_checked_state = (state, task) => {\n  if (Array.isArray(task.subtasks)) {\n    task.subtasks.forEach(subtask => {\n      subtask.completed = task.completed;\n    });\n  }\n};\nconst update_tasks_checked_state = (state, task) => {\n  if (!Array.isArray(task.subtasks)) {\n    console.log('empty');\n    return;\n  }\n  task.completed = task.subtasks.every(subtask => subtask.completed);\n};","map":{"version":3,"names":["createStore","state","tasks","id","text","completed","subtasks","add_task","filter","getters","showTasks","mutations","ADD_TASK","taskText","newTask","Date","now","trim","push","ADD_SUBTASK","taskId","subtaskText","newSubtask","currentTask","find","task","update_tasks_checked_state","DELETE_TASK","DELETE_SUBTASK","subtaskId","s","UPDATE_TASK_CHECKED","t","update_subtasks_checked_state","UPDATE_SUBTASK_CHECKED","subtask","Array","isArray","forEach","console","log","every"],"sources":["C:/Users/Pavel/Documents/webstorm/todo/src/store.js"],"sourcesContent":["import {createStore} from 'vuex'\r\n\r\nexport default createStore({\r\n  state() {\r\n    return {\r\n      tasks: [\r\n        {\r\n          id: 1,\r\n          text: 'Закончить проект',\r\n          completed: false,\r\n          subtasks: [\r\n            {id: 1, text: \"Создать компоненты\", completed: true},\r\n            {id: 2, text: \"Написать тесты\", completed: false}\r\n          ]\r\n        },\r\n        {\r\n          id: 2,\r\n          text: 'Купить продукты',\r\n          completed: true,\r\n          subtasks: [\r\n            {id: 1, text: \"Хлеб\", completed: true},\r\n            {id: 2, text: \"Молоко\", completed: false},\r\n            {id: 3, text: \"Яйца\", completed: true}\r\n          ]\r\n        }\r\n      ],\r\n      add_task: '',\r\n      filter: 'all'\r\n    }\r\n  },\r\n  getters: {\r\n    showTasks: (state) => state.tasks,\r\n  },\r\n  mutations: {\r\n    ADD_TASK(state, taskText) {\r\n      const newTask = {\r\n        id: Date.now(),\r\n        text: taskText.trim(),\r\n        completed: false,\r\n        subtasks: []\r\n      };\r\n      if (newTask.text) state.tasks.push(newTask);\r\n    },\r\n    ADD_SUBTASK(state, {taskId, subtaskText}) {\r\n      const newSubtask = {\r\n        id: Date.now(),\r\n        text: subtaskText.trim(),\r\n        completed: false,\r\n      };\r\n      const currentTask = state.tasks.find(task => task.id === taskId);\r\n      if (newSubtask.text && currentTask) {\r\n        currentTask.subtasks.push(newSubtask);\r\n      }\r\n      update_tasks_checked_state(state, currentTask)\r\n    },\r\n    DELETE_TASK(state, taskId) {\r\n      state.tasks = state.tasks.filter(task => task.id !== taskId);\r\n    },\r\n    DELETE_SUBTASK(state, {taskId, subtaskId}) {\r\n      const task = state.tasks.find(task => task.id === taskId);\r\n      if (task) {\r\n        task.subtasks = task.subtasks.filter(s => s.id !== subtaskId);\r\n      }\r\n      update_tasks_checked_state(state, task)\r\n    },\r\n    UPDATE_TASK_CHECKED(state, taskId) {\r\n      const task = state.tasks.find(t => t.id === taskId);\r\n      if (task) {\r\n        task.completed = !task.completed;\r\n        update_subtasks_checked_state(state, task);\r\n      }\r\n    },\r\n    UPDATE_SUBTASK_CHECKED(state, {taskId, subtaskId}) {\r\n      const task = state.tasks.find(task => task.id === taskId);\r\n      if (!task) return;\r\n      const subtask = task.subtasks.find(t => t.id === subtaskId);\r\n      if (subtask) subtask.completed = !subtask.completed;\r\n      update_tasks_checked_state(state, task)\r\n    }\r\n  }\r\n})\r\n\r\nconst update_subtasks_checked_state = (state, task) => {\r\n  if (Array.isArray(task.subtasks)) {\r\n    task.subtasks.forEach((subtask) => {\r\n      subtask.completed = task.completed;\r\n    });\r\n  }\r\n};\r\n\r\nconst update_tasks_checked_state = (state, task) => {\r\n  if (!Array.isArray(task.subtasks)) {\r\n    console.log('empty');\r\n    return;\r\n  }\r\n  task.completed = task.subtasks.every(subtask => subtask.completed);\r\n};"],"mappings":";;;;;;AAAA,SAAQA,WAAW,QAAO,MAAM;AAEhC,eAAeA,WAAW,CAAC;EACzBC,KAAKA,CAAA,EAAG;IACN,OAAO;MACLC,KAAK,EAAE,CACL;QACEC,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,kBAAkB;QACxBC,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAE,CACR;UAACH,EAAE,EAAE,CAAC;UAAEC,IAAI,EAAE,oBAAoB;UAAEC,SAAS,EAAE;QAAI,CAAC,EACpD;UAACF,EAAE,EAAE,CAAC;UAAEC,IAAI,EAAE,gBAAgB;UAAEC,SAAS,EAAE;QAAK,CAAC;MAErD,CAAC,EACD;QACEF,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,iBAAiB;QACvBC,SAAS,EAAE,IAAI;QACfC,QAAQ,EAAE,CACR;UAACH,EAAE,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,SAAS,EAAE;QAAI,CAAC,EACtC;UAACF,EAAE,EAAE,CAAC;UAAEC,IAAI,EAAE,QAAQ;UAAEC,SAAS,EAAE;QAAK,CAAC,EACzC;UAACF,EAAE,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,SAAS,EAAE;QAAI,CAAC;MAE1C,CAAC,CACF;MACDE,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,SAAS,EAAGT,KAAK,IAAKA,KAAK,CAACC;EAC9B,CAAC;EACDS,SAAS,EAAE;IACTC,QAAQA,CAACX,KAAK,EAAEY,QAAQ,EAAE;MACxB,MAAMC,OAAO,GAAG;QACdX,EAAE,EAAEY,IAAI,CAACC,GAAG,CAAC,CAAC;QACdZ,IAAI,EAAES,QAAQ,CAACI,IAAI,CAAC,CAAC;QACrBZ,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAE;MACZ,CAAC;MACD,IAAIQ,OAAO,CAACV,IAAI,EAAEH,KAAK,CAACC,KAAK,CAACgB,IAAI,CAACJ,OAAO,CAAC;IAC7C,CAAC;IACDK,WAAWA,CAAClB,KAAK,EAAE;MAACmB,MAAM;MAAEC;IAAW,CAAC,EAAE;MACxC,MAAMC,UAAU,GAAG;QACjBnB,EAAE,EAAEY,IAAI,CAACC,GAAG,CAAC,CAAC;QACdZ,IAAI,EAAEiB,WAAW,CAACJ,IAAI,CAAC,CAAC;QACxBZ,SAAS,EAAE;MACb,CAAC;MACD,MAAMkB,WAAW,GAAGtB,KAAK,CAACC,KAAK,CAACsB,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACtB,EAAE,KAAKiB,MAAM,CAAC;MAChE,IAAIE,UAAU,CAAClB,IAAI,IAAImB,WAAW,EAAE;QAClCA,WAAW,CAACjB,QAAQ,CAACY,IAAI,CAACI,UAAU,CAAC;MACvC;MACAI,0BAA0B,CAACzB,KAAK,EAAEsB,WAAW,CAAC;IAChD,CAAC;IACDI,WAAWA,CAAC1B,KAAK,EAAEmB,MAAM,EAAE;MACzBnB,KAAK,CAACC,KAAK,GAAGD,KAAK,CAACC,KAAK,CAACM,MAAM,CAACiB,IAAI,IAAIA,IAAI,CAACtB,EAAE,KAAKiB,MAAM,CAAC;IAC9D,CAAC;IACDQ,cAAcA,CAAC3B,KAAK,EAAE;MAACmB,MAAM;MAAES;IAAS,CAAC,EAAE;MACzC,MAAMJ,IAAI,GAAGxB,KAAK,CAACC,KAAK,CAACsB,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACtB,EAAE,KAAKiB,MAAM,CAAC;MACzD,IAAIK,IAAI,EAAE;QACRA,IAAI,CAACnB,QAAQ,GAAGmB,IAAI,CAACnB,QAAQ,CAACE,MAAM,CAACsB,CAAC,IAAIA,CAAC,CAAC3B,EAAE,KAAK0B,SAAS,CAAC;MAC/D;MACAH,0BAA0B,CAACzB,KAAK,EAAEwB,IAAI,CAAC;IACzC,CAAC;IACDM,mBAAmBA,CAAC9B,KAAK,EAAEmB,MAAM,EAAE;MACjC,MAAMK,IAAI,GAAGxB,KAAK,CAACC,KAAK,CAACsB,IAAI,CAACQ,CAAC,IAAIA,CAAC,CAAC7B,EAAE,KAAKiB,MAAM,CAAC;MACnD,IAAIK,IAAI,EAAE;QACRA,IAAI,CAACpB,SAAS,GAAG,CAACoB,IAAI,CAACpB,SAAS;QAChC4B,6BAA6B,CAAChC,KAAK,EAAEwB,IAAI,CAAC;MAC5C;IACF,CAAC;IACDS,sBAAsBA,CAACjC,KAAK,EAAE;MAACmB,MAAM;MAAES;IAAS,CAAC,EAAE;MACjD,MAAMJ,IAAI,GAAGxB,KAAK,CAACC,KAAK,CAACsB,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACtB,EAAE,KAAKiB,MAAM,CAAC;MACzD,IAAI,CAACK,IAAI,EAAE;MACX,MAAMU,OAAO,GAAGV,IAAI,CAACnB,QAAQ,CAACkB,IAAI,CAACQ,CAAC,IAAIA,CAAC,CAAC7B,EAAE,KAAK0B,SAAS,CAAC;MAC3D,IAAIM,OAAO,EAAEA,OAAO,CAAC9B,SAAS,GAAG,CAAC8B,OAAO,CAAC9B,SAAS;MACnDqB,0BAA0B,CAACzB,KAAK,EAAEwB,IAAI,CAAC;IACzC;EACF;AACF,CAAC,CAAC;AAEF,MAAMQ,6BAA6B,GAAGA,CAAChC,KAAK,EAAEwB,IAAI,KAAK;EACrD,IAAIW,KAAK,CAACC,OAAO,CAACZ,IAAI,CAACnB,QAAQ,CAAC,EAAE;IAChCmB,IAAI,CAACnB,QAAQ,CAACgC,OAAO,CAAEH,OAAO,IAAK;MACjCA,OAAO,CAAC9B,SAAS,GAAGoB,IAAI,CAACpB,SAAS;IACpC,CAAC,CAAC;EACJ;AACF,CAAC;AAED,MAAMqB,0BAA0B,GAAGA,CAACzB,KAAK,EAAEwB,IAAI,KAAK;EAClD,IAAI,CAACW,KAAK,CAACC,OAAO,CAACZ,IAAI,CAACnB,QAAQ,CAAC,EAAE;IACjCiC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB;EACF;EACAf,IAAI,CAACpB,SAAS,GAAGoB,IAAI,CAACnB,QAAQ,CAACmC,KAAK,CAACN,OAAO,IAAIA,OAAO,CAAC9B,SAAS,CAAC;AACpE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}