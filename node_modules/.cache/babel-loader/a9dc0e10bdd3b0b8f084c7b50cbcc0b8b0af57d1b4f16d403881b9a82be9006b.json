{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"task__subtasks\"\n};\nconst _hoisted_2 = [\"id\", \"checked\", \"onChange\"];\nconst _hoisted_3 = [\"for\"];\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.subtasks, subtask => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      class: \"task__subtask\",\n      key: subtask.id\n    }, [_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      id: $props.taskId + '_' + subtask.id,\n      checked: $options.isSubtaskChecked(subtask.id),\n      onChange: $event => $options.updateSubtaskStatus(subtask.id, $event.target.checked)\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_2), _createElementVNode(\"label\", {\n      for: $props.taskId + '_' + subtask.id\n    }, null, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"span\", null, _toDisplayString(subtask.text), 1 /* TEXT */), _createElementVNode(\"button\", {\n      type: \"button\",\n      onClick: $event => $options.deleteSubtask(subtask.id)\n    }, [_createCommentVNode(\" SVG иконка \")], 8 /* PROPS */, _hoisted_4)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"form\", {\n    class: \"add-subtask\",\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.addSubtask && $options.addSubtask(...args), [\"prevent\"]))\n  }, [_cache[2] || (_cache[2] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"+\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"Add a new subtask\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newSubtaskText = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newSubtaskText]])], 32 /* NEED_HYDRATION */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_renderList","$props","subtasks","subtask","key","id","type","taskId","checked","$options","isSubtaskChecked","onChange","$event","updateSubtaskStatus","target","_hoisted_2","for","_hoisted_3","_toDisplayString","text","onClick","deleteSubtask","_createCommentVNode","_hoisted_4","onSubmit","_cache","_withModifiers","args","addSubtask","placeholder","$data","newSubtaskText"],"sources":["C:\\Users\\Pavel\\Documents\\webstorm\\todo\\src\\components\\SubTasks.vue"],"sourcesContent":["<template>\r\n  <ul class=\"task__subtasks\">\r\n    <li class=\"task__subtask\" v-for=\"subtask in subtasks\" :key=\"subtask.id\">\r\n      <input\r\n          type=\"checkbox\"\r\n          :id=\"taskId + '_' + subtask.id\"\r\n          :checked=\"isSubtaskChecked(subtask.id)\"\r\n          @change=\"updateSubtaskStatus(subtask.id, $event.target.checked)\"\r\n      >\r\n      <label :for=\"taskId + '_' + subtask.id\"></label>\r\n      <span>{{ subtask.text }}</span>\r\n      <button type=\"button\" @click=\"deleteSubtask(subtask.id)\">\r\n        <!-- SVG иконка -->\r\n      </button>\r\n    </li>\r\n  </ul>\r\n\r\n  <form class=\"add-subtask\" @submit.prevent=\"addSubtask\">\r\n    <button type=\"submit\">+</button>\r\n    <input\r\n        type=\"text\"\r\n        placeholder=\"Add a new subtask\"\r\n        v-model=\"newSubtaskText\"\r\n    >\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      newSubtaskText: ''\r\n    }\r\n  },\r\n  props: {\r\n    subtasks: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    taskId: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  methods: {\r\n    addSubtask() {\r\n      if (this.newSubtaskText.trim()) {\r\n        this.$store.commit('ADD_SUBTASK', {\r\n          taskId: this.taskId,\r\n          text: this.newSubtaskText.trim()\r\n        });\r\n        this.newSubtaskText = '';\r\n      }\r\n    },\r\n    deleteSubtask(subtaskId) {\r\n      this.$store.commit('DELETE_SUBTASK', {\r\n        taskId: this.taskId,\r\n        subtaskId\r\n      });\r\n    },\r\n    isSubtaskChecked(subtaskId) {\r\n      const subtask = this.subtasks.find(s => s.id === subtaskId);\r\n      return subtask?.completed || false;\r\n    },\r\n    updateSubtaskStatus(subtaskId) {\r\n      this.$store.commit('UPDATE_SUBTASK_CHECKED', {\r\n        taskId: this.taskId,\r\n        subtaskId\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":";;EACMA,KAAK,EAAC;AAAgB;mBAD5B;mBAAA;mBAAA;;uBAAAC,mBAAA,CAAAC,SAAA,SACEC,mBAAA,CAcK,MAdLC,UAcK,I,kBAbHH,mBAAA,CAYKC,SAAA,QAdTG,WAAA,CAEgDC,MAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAxCP,mBAAA,CAYK;MAZDD,KAAK,EAAC,eAAe;MAA8BS,GAAG,EAAED,OAAO,CAACE;QAClEP,mBAAA,CAKC;MAJGQ,IAAI,EAAC,UAAU;MACdD,EAAE,EAAEJ,MAAA,CAAAM,MAAM,SAASJ,OAAO,CAACE,EAAE;MAC7BG,OAAO,EAAEC,QAAA,CAAAC,gBAAgB,CAACP,OAAO,CAACE,EAAE;MACpCM,QAAM,EAAAC,MAAA,IAAEH,QAAA,CAAAI,mBAAmB,CAACV,OAAO,CAACE,EAAE,EAAEO,MAAM,CAACE,MAAM,CAACN,OAAO;6CAPxEO,UAAA,GASMjB,mBAAA,CAAgD;MAAxCkB,GAAG,EAAEf,MAAA,CAAAM,MAAM,SAASJ,OAAO,CAACE;4BAT1CY,UAAA,GAUMnB,mBAAA,CAA+B,cAAAoB,gBAAA,CAAtBf,OAAO,CAACgB,IAAI,kBACrBrB,mBAAA,CAES;MAFDQ,IAAI,EAAC,QAAQ;MAAEc,OAAK,EAAAR,MAAA,IAAEH,QAAA,CAAAY,aAAa,CAAClB,OAAO,CAACE,EAAE;QACpDiB,mBAAA,gBAAmB,C,iBAZ3BC,UAAA,E;oCAiBEzB,mBAAA,CAOO;IAPDH,KAAK,EAAC,aAAa;IAAE6B,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAjBnCC,cAAA,KAAAC,IAAA,KAiB6ClB,QAAA,CAAAmB,UAAA,IAAAnB,QAAA,CAAAmB,UAAA,IAAAD,IAAA,CAAU;gCACnD7B,mBAAA,CAAgC;IAAxBQ,IAAI,EAAC;EAAQ,GAAC,GAAC,sB,gBACvBR,mBAAA,CAIC;IAHGQ,IAAI,EAAC,MAAM;IACXuB,WAAW,EAAC,mBAAmB;IArBvC,uBAAAJ,MAAA,QAAAA,MAAA,MAAAb,MAAA,IAsBiBkB,KAAA,CAAAC,cAAc,GAAAnB,MAAA;iDAAdkB,KAAA,CAAAC,cAAc,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}