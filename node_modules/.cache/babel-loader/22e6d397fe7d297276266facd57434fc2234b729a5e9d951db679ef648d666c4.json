{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"task__main\"\n};\nconst _hoisted_2 = [\"id\", \"checked\"];\nconst _hoisted_3 = [\"for\"];\nconst _hoisted_4 = {\n  class: \"task__main--span\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_sub_tasks = _resolveComponent(\"sub-tasks\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"task\",\n    key: _ctx.task.id\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    class: \"task__main--checkbox--hide\",\n    id: _ctx.task.id,\n    checked: $options.taskChecked,\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.$store.commit('CHECK_TASK', _ctx.task.id))\n  }, null, 8 /* PROPS */, _hoisted_2), _createElementVNode(\"label\", {\n    for: _ctx.task.id,\n    class: \"task__main--checkbox--visible\"\n  }, null, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"span\", _hoisted_4, _toDisplayString(_ctx.task.text), 1 /* TEXT */), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"task__main--delete\",\n    onClick: _cache[1] || (_cache[1] = $event => $options.deleteTask(_ctx.task.id))\n  }, _cache[2] || (_cache[2] = [_createElementVNode(\"svg\", {\n    width: \"26\",\n    height: \"26\",\n    viewBox: \"0 0 26 26\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, [_createElementVNode(\"path\", {\n    d: \"M9 9L17 17M17 9L9 17M3.66667 1H22.3333C23.8061 1 25 2.19391 25 3.66667V22.3333C25 23.8061 23.8061 25 22.3333 25H3.66667C2.19391 25 1 23.8061 1 22.3333V3.66667C1 2.19391 2.19391 1 3.66667 1Z\",\n    stroke: \"#FFCA93\",\n    \"stroke-width\": \"1.5\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\"\n  })], -1 /* HOISTED */)]))]), _createVNode(_component_sub_tasks, {\n    subtasks: _ctx.task.subtasks,\n    taskId: _ctx.task.id\n  }, null, 8 /* PROPS */, [\"subtasks\", \"taskId\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","key","_ctx","task","id","_createElementVNode","_hoisted_1","type","checked","$options","taskChecked","onClick","_cache","$event","$store","commit","_hoisted_2","for","_hoisted_3","_hoisted_4","_toDisplayString","text","deleteTask","width","height","viewBox","fill","xmlns","d","stroke","_createVNode","_component_sub_tasks","subtasks","taskId"],"sources":["C:\\Users\\Pavel\\Documents\\webstorm\\todo\\src\\components\\TaskList.vue"],"sourcesContent":["<template>\r\n  <div class=\"task\" v-for=\"task in \" :key=\"task.id\">\r\n    <div class=\"task__main\">\r\n      <input type=\"checkbox\" class=\"task__main--checkbox--hide\" :id=\"task.id\" :checked=\"taskChecked\" @click=\"$store.commit('CHECK_TASK', task.id)\">\r\n      <label :for=\"task.id\" class=\"task__main--checkbox--visible\">\r\n\r\n      </label>\r\n      <span class=\"task__main--span\">{{ task.text }}</span>\r\n      <button type=\"button\" class=\"task__main--delete\" @click=\"deleteTask(task.id)\">\r\n        <svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path\r\n              d=\"M9 9L17 17M17 9L9 17M3.66667 1H22.3333C23.8061 1 25 2.19391 25 3.66667V22.3333C25 23.8061 23.8061 25 22.3333 25H3.66667C2.19391 25 1 23.8061 1 22.3333V3.66667C1 2.19391 2.19391 1 3.66667 1Z\"\r\n              stroke=\"#FFCA93\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n\r\n    <sub-tasks :subtasks=\"task.subtasks\" :taskId=\"task.id\"></sub-tasks>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SubTasks from \"./SubTasks\";\r\n\r\nexport default {\r\n  components: {\r\n    'sub-tasks': SubTasks\r\n  },\r\n  methods: {\r\n    deleteTask(id) {\r\n      this.$store.commit(\"DELETE_TASK\", id)\r\n    }\r\n  },\r\n  computed: {\r\n    taskChecked: {\r\n      get() {\r\n        const task = this.$store.state.tasks.find(t => t.id === this.taskId);\r\n        return task?.checked || false;\r\n      },\r\n      set() {\r\n        this.$store.commit('UPDATE_TASK_CHECKED', this.taskId);\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>"],"mappings":";;EAESA,KAAK,EAAC;AAAY;mBAF3B;mBAAA;;EAOYA,KAAK,EAAC;AAAkB;;;uBANlCC,mBAAA,CAiBM;IAjBDD,KAAK,EAAC,MAAM;IAAmBE,GAAG,EAAEC,IAAA,CAAAC,IAAI,CAACC;MAC5CC,mBAAA,CAaM,OAbNC,UAaM,GAZJD,mBAAA,CAA6I;IAAtIE,IAAI,EAAC,UAAU;IAACR,KAAK,EAAC,4BAA4B;IAAEK,EAAE,EAAEF,IAAA,CAAAC,IAAI,CAACC,EAAE;IAAGI,OAAO,EAAEC,QAAA,CAAAC,WAAW;IAAGC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEX,IAAA,CAAAY,MAAM,CAACC,MAAM,eAAeb,IAAA,CAAAC,IAAI,CAACC,EAAE;0BAHhJY,UAAA,GAIMX,mBAAA,CAEQ;IAFAY,GAAG,EAAEf,IAAA,CAAAC,IAAI,CAACC,EAAE;IAAEL,KAAK,EAAC;0BAJlCmB,UAAA,GAOMb,mBAAA,CAAqD,QAArDc,UAAqD,EAAAC,gBAAA,CAAnBlB,IAAA,CAAAC,IAAI,CAACkB,IAAI,kBAC3ChB,mBAAA,CAMS;IANDE,IAAI,EAAC,QAAQ;IAACR,KAAK,EAAC,oBAAoB;IAAEY,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEJ,QAAA,CAAAa,UAAU,CAACpB,IAAA,CAAAC,IAAI,CAACC,EAAE;gCACzEC,mBAAA,CAIM;IAJDkB,KAAK,EAAC,IAAI;IAACC,MAAM,EAAC,IAAI;IAACC,OAAO,EAAC,WAAW;IAACC,IAAI,EAAC,MAAM;IAACC,KAAK,EAAC;MAChEtB,mBAAA,CAEyF;IADrFuB,CAAC,EAAC,+LAA+L;IACjMC,MAAM,EAAC,SAAS;IAAC,cAAY,EAAC,KAAK;IAAC,gBAAc,EAAC,OAAO;IAAC,iBAAe,EAAC;+BAKrFC,YAAA,CAAmEC,oBAAA;IAAvDC,QAAQ,EAAE9B,IAAA,CAAAC,IAAI,CAAC6B,QAAQ;IAAGC,MAAM,EAAE/B,IAAA,CAAAC,IAAI,CAACC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}