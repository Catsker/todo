{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { createStore } from 'vuex';\nconst StorageKey = 'vue-todo-app';\nconst saveState = state => {\n  localStorage.setItem(StorageKey, JSON.stringify(state));\n};\nexport default createStore({\n  state() {\n    return {\n      tasks: [{\n        id: 1,\n        text: 'Закончить проект',\n        completed: false,\n        subtasks: [{\n          id: 1,\n          text: \"Создать компоненты\",\n          completed: true\n        }, {\n          id: 2,\n          text: \"Написать тесты\",\n          completed: false\n        }]\n      }, {\n        id: 2,\n        text: 'Купить продукты',\n        completed: false,\n        subtasks: [{\n          id: 1,\n          text: \"Хлеб\",\n          completed: true\n        }, {\n          id: 2,\n          text: \"Молоко\",\n          completed: false\n        }, {\n          id: 3,\n          text: \"Яйца\",\n          completed: true\n        }]\n      }],\n      add_task: '',\n      filter: 'all'\n    };\n  },\n  getters: {\n    showTasks: state => state.tasks,\n    showDoneTasks: state => {\n      const completedCount = state.tasks.reduce((count, task) => task.completed ? count + 1 : count, 0);\n      return `${completedCount}/${state.tasks.length}`;\n    }\n  },\n  mutations: {\n    ADD_TASK(state, taskText) {\n      const newTask = {\n        id: Date.now(),\n        text: taskText.trim(),\n        completed: false,\n        subtasks: []\n      };\n      if (newTask.text) state.tasks.push(newTask);\n    },\n    ADD_SUBTASK(state, {\n      taskId,\n      subtaskText\n    }) {\n      const newSubtask = {\n        id: Date.now(),\n        text: subtaskText.trim(),\n        completed: false\n      };\n      const currentTask = state.tasks.find(task => task.id === taskId);\n      if (newSubtask.text && currentTask) {\n        currentTask.subtasks.push(newSubtask);\n      }\n      update_tasks_checked_state(state, currentTask);\n    },\n    DELETE_TASK(state, taskId) {\n      state.tasks = state.tasks.filter(task => task.id !== taskId);\n    },\n    DELETE_SUBTASK(state, {\n      taskId,\n      subtaskId\n    }) {\n      const task = state.tasks.find(task => task.id === taskId);\n      if (!task?.subtasks) return;\n      const index = task.subtasks.findIndex(s => s.id === subtaskId);\n      if (index !== -1) {\n        task.subtasks.splice(index, 1);\n        task.completed = task.subtasks.length === 0 ? false : task.subtasks.every(s => s.completed);\n      }\n    },\n    UPDATE_TASK_CHECKED(state, taskId) {\n      const task = state.tasks.find(t => t.id === taskId);\n      if (task) {\n        task.completed = !task.completed;\n        update_subtasks_checked_state(state, task);\n      }\n    },\n    UPDATE_SUBTASK_CHECKED(state, {\n      taskId,\n      subtaskId\n    }) {\n      const task = state.tasks.find(task => task.id === taskId);\n      if (!task) return;\n      const subtask = task.subtasks.find(t => t.id === subtaskId);\n      if (subtask) subtask.completed = !subtask.completed;\n      update_tasks_checked_state(state, task);\n    }\n  }\n});\nconst update_subtasks_checked_state = (state, task) => {\n  if (Array.isArray(task.subtasks)) {\n    task.subtasks.forEach(subtask => {\n      subtask.completed = task.completed;\n    });\n  }\n};\nconst update_tasks_checked_state = (state, task) => {\n  if (!Array.isArray(task.subtasks)) {\n    console.log('empty');\n    return;\n  }\n  task.completed = task.subtasks.every(subtask => subtask.completed);\n};","map":{"version":3,"names":["createStore","StorageKey","saveState","state","localStorage","setItem","JSON","stringify","tasks","id","text","completed","subtasks","add_task","filter","getters","showTasks","showDoneTasks","completedCount","reduce","count","task","length","mutations","ADD_TASK","taskText","newTask","Date","now","trim","push","ADD_SUBTASK","taskId","subtaskText","newSubtask","currentTask","find","update_tasks_checked_state","DELETE_TASK","DELETE_SUBTASK","subtaskId","index","findIndex","s","splice","every","UPDATE_TASK_CHECKED","t","update_subtasks_checked_state","UPDATE_SUBTASK_CHECKED","subtask","Array","isArray","forEach","console","log"],"sources":["C:/Users/Pavel/Documents/webstorm/todo/src/store.js"],"sourcesContent":["import {createStore} from 'vuex'\r\n\r\nconst StorageKey = 'vue-todo-app'\r\n\r\nconst saveState = (state) => {\r\n  localStorage.setItem(StorageKey, JSON.stringify(state))\r\n}\r\n\r\nexport default createStore({\r\n  state() {\r\n    return {\r\n      tasks: [\r\n        {\r\n          id: 1,\r\n          text: 'Закончить проект',\r\n          completed: false,\r\n          subtasks: [\r\n            {id: 1, text: \"Создать компоненты\", completed: true},\r\n            {id: 2, text: \"Написать тесты\", completed: false}\r\n          ]\r\n        },\r\n        {\r\n          id: 2,\r\n          text: 'Купить продукты',\r\n          completed: false,\r\n          subtasks: [\r\n            {id: 1, text: \"Хлеб\", completed: true},\r\n            {id: 2, text: \"Молоко\", completed: false},\r\n            {id: 3, text: \"Яйца\", completed: true}\r\n          ]\r\n        }\r\n      ],\r\n      add_task: '',\r\n      filter: 'all'\r\n    }\r\n  },\r\n  getters: {\r\n    showTasks: (state) => state.tasks,\r\n    showDoneTasks: (state) => {\r\n      const completedCount = state.tasks.reduce((count, task) =>\r\n        task.completed ? count + 1 : count, 0);\r\n      return `${completedCount}/${state.tasks.length}`;\r\n    }\r\n  },\r\n  mutations: {\r\n    ADD_TASK(state, taskText) {\r\n      const newTask = {\r\n        id: Date.now(),\r\n        text: taskText.trim(),\r\n        completed: false,\r\n        subtasks: []\r\n      };\r\n      if (newTask.text) state.tasks.push(newTask);\r\n    },\r\n    ADD_SUBTASK(state, {taskId, subtaskText}) {\r\n      const newSubtask = {\r\n        id: Date.now(),\r\n        text: subtaskText.trim(),\r\n        completed: false,\r\n      };\r\n      const currentTask = state.tasks.find(task => task.id === taskId);\r\n      if (newSubtask.text && currentTask) {\r\n        currentTask.subtasks.push(newSubtask);\r\n      }\r\n      update_tasks_checked_state(state, currentTask)\r\n    },\r\n    DELETE_TASK(state, taskId) {\r\n      state.tasks = state.tasks.filter(task => task.id !== taskId);\r\n    },\r\n    DELETE_SUBTASK(state, { taskId, subtaskId }) {\r\n      const task = state.tasks.find(task => task.id === taskId);\r\n      if (!task?.subtasks) return;\r\n\r\n      const index = task.subtasks.findIndex(s => s.id === subtaskId);\r\n      if (index !== -1) {\r\n        task.subtasks.splice(index, 1);\r\n        task.completed = task.subtasks.length === 0\r\n          ? false\r\n          : task.subtasks.every(s => s.completed);\r\n      }\r\n    },\r\n    UPDATE_TASK_CHECKED(state, taskId) {\r\n      const task = state.tasks.find(t => t.id === taskId);\r\n      if (task) {\r\n        task.completed = !task.completed;\r\n        update_subtasks_checked_state(state, task);\r\n      }\r\n    },\r\n    UPDATE_SUBTASK_CHECKED(state, {taskId, subtaskId}) {\r\n      const task = state.tasks.find(task => task.id === taskId);\r\n      if (!task) return;\r\n      const subtask = task.subtasks.find(t => t.id === subtaskId);\r\n      if (subtask) subtask.completed = !subtask.completed;\r\n      update_tasks_checked_state(state, task)\r\n    }\r\n  }\r\n})\r\n\r\nconst update_subtasks_checked_state = (state, task) => {\r\n  if (Array.isArray(task.subtasks)) {\r\n    task.subtasks.forEach((subtask) => {\r\n      subtask.completed = task.completed;\r\n    });\r\n  }\r\n};\r\n\r\nconst update_tasks_checked_state = (state, task) => {\r\n  if (!Array.isArray(task.subtasks)) {\r\n    console.log('empty');\r\n    return;\r\n  }\r\n  task.completed = task.subtasks.every(subtask => subtask.completed);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}