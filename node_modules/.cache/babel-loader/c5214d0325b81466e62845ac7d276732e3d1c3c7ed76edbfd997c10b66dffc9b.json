{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { createStore } from 'vuex';\nconst update_subtasks_checked_state = (state, task) => {\n  if (Array.isArray(task.subtasks)) {\n    task.subtasks.forEach(subtask => {\n      subtask.completed = task.completed;\n    });\n  }\n};\nexport default createStore({\n  state() {\n    return {\n      tasks: [{\n        id: 1,\n        text: 'Закончить проект',\n        completed: false,\n        subtasks: [{\n          id: 1,\n          text: \"Создать компоненты\",\n          completed: true\n        }, {\n          id: 2,\n          text: \"Написать тесты\",\n          completed: false\n        }]\n      }, {\n        id: 2,\n        text: 'Купить продукты',\n        completed: true,\n        subtasks: [{\n          id: 1,\n          text: \"Хлеб\",\n          completed: true\n        }, {\n          id: 2,\n          text: \"Молоко\",\n          completed: false\n        }, {\n          id: 3,\n          text: \"Яйца\",\n          completed: true\n        }]\n      }],\n      add_task: '',\n      filter: 'all'\n    };\n  },\n  getters: {\n    showTasks: state => state.tasks\n  },\n  mutations: {\n    ADD_TASK(state, taskText) {\n      const newTask = {\n        id: Date.now(),\n        text: taskText.trim(),\n        completed: false,\n        subtasks: []\n      };\n      if (newTask.text) state.tasks.push(newTask);\n    },\n    ADD_SUBTASK(state, {\n      taskId,\n      subtaskText\n    }) {\n      const newSubtask = {\n        id: Date.now(),\n        text: subtaskText.trim(),\n        completed: false\n      };\n      const currentTask = state.tasks.find(task => task.id === taskId);\n      if (newSubtask.text && currentTask) {\n        currentTask.subtasks.push(newSubtask);\n      }\n    },\n    DELETE_TASK(state, taskId) {\n      state.tasks = state.tasks.filter(task => task.id !== taskId);\n    },\n    DELETE_SUBTASK(state, {\n      taskId,\n      subtaskId\n    }) {\n      const task = state.tasks.find(task => task.id === taskId);\n      if (task) {\n        task.subtasks = task.subtasks.filter(s => s.id !== subtaskId);\n      }\n    },\n    UPDATE_TASK_CHECKED(state, taskId) {\n      const task = state.tasks.find(t => t.id === taskId);\n      if (task) {\n        task.completed = !task.completed;\n        update_subtasks_checked_state(state, task);\n      }\n    },\n    UPDATE_SUBTASK_CHECKED(state, {\n      taskId,\n      subtaskId\n    }) {\n      const task = state.tasks.find(task => task.id === taskId);\n      if (!task) return;\n      const subtask = task.subtasks.find(t => t.id === subtaskId);\n      if (subtask) subtask.completed = !subtask.completed;\n    }\n  }\n});","map":{"version":3,"names":["createStore","update_subtasks_checked_state","state","task","Array","isArray","subtasks","forEach","subtask","completed","tasks","id","text","add_task","filter","getters","showTasks","mutations","ADD_TASK","taskText","newTask","Date","now","trim","push","ADD_SUBTASK","taskId","subtaskText","newSubtask","currentTask","find","DELETE_TASK","DELETE_SUBTASK","subtaskId","s","UPDATE_TASK_CHECKED","t","UPDATE_SUBTASK_CHECKED"],"sources":["C:/Users/Pavel/Documents/webstorm/todo/src/store.js"],"sourcesContent":["import { createStore } from 'vuex'\r\n\r\nconst update_subtasks_checked_state = (state, task) => {\r\n  if (Array.isArray(task.subtasks)) {\r\n    task.subtasks.forEach((subtask) => {\r\n      subtask.completed = task.completed;\r\n    });\r\n  }\r\n};\r\n\r\nexport default createStore({\r\n  state() {\r\n    return {\r\n      tasks: [\r\n        {\r\n          id: 1,\r\n          text: 'Закончить проект',\r\n          completed: false,\r\n          subtasks: [\r\n            { id: 1, text: \"Создать компоненты\", completed: true },\r\n            { id: 2, text: \"Написать тесты\", completed: false }\r\n          ]\r\n        },\r\n        {\r\n          id: 2,\r\n          text: 'Купить продукты',\r\n          completed: true,\r\n          subtasks: [\r\n            { id: 1, text: \"Хлеб\", completed: true },\r\n            { id: 2, text: \"Молоко\", completed: false },\r\n            { id: 3, text: \"Яйца\", completed: true }\r\n          ]\r\n        }\r\n      ],\r\n      add_task: '',\r\n      filter: 'all'\r\n    }\r\n  },\r\n  getters: {\r\n    showTasks: (state) => state.tasks,\r\n  },\r\n  mutations: {\r\n    ADD_TASK(state, taskText) {\r\n      const newTask = {\r\n        id: Date.now(),\r\n        text: taskText.trim(),\r\n        completed: false,\r\n        subtasks: []\r\n      };\r\n      if (newTask.text) state.tasks.push(newTask);\r\n    },\r\n    ADD_SUBTASK(state, { taskId, subtaskText }) {\r\n      const newSubtask = {\r\n        id: Date.now(),\r\n        text: subtaskText.trim(),\r\n        completed: false,\r\n      };\r\n      const currentTask = state.tasks.find(task => task.id === taskId);\r\n      if (newSubtask.text && currentTask) {\r\n        currentTask.subtasks.push(newSubtask);\r\n      }\r\n    },\r\n    DELETE_TASK(state, taskId) {\r\n      state.tasks = state.tasks.filter(task => task.id !== taskId);\r\n    },\r\n    DELETE_SUBTASK(state, { taskId, subtaskId }) {\r\n      const task = state.tasks.find(task => task.id === taskId);\r\n      if (task) {\r\n        task.subtasks = task.subtasks.filter(s => s.id !== subtaskId);\r\n      }\r\n    },\r\n    UPDATE_TASK_CHECKED(state, taskId) {\r\n      const task = state.tasks.find(t => t.id === taskId);\r\n      if (task) {\r\n        task.completed = !task.completed;\r\n        update_subtasks_checked_state(state, task);\r\n      }\r\n    },\r\n    UPDATE_SUBTASK_CHECKED(state, { taskId, subtaskId }) {\r\n      const task = state.tasks.find(task => task.id === taskId);\r\n      if (!task) return;\r\n      const subtask = task.subtasks.find(t => t.id === subtaskId);\r\n      if (subtask) subtask.completed = !subtask.completed;\r\n    }\r\n  }\r\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}