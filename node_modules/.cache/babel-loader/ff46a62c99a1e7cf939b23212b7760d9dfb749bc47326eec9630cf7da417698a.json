{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport TaskItem from './components/TaskItem.vue';\nimport AddTaskForm from './components/AddTaskForm.vue';\nimport TaskFilters from './components/TaskFilters.vue';\nimport ProgressCounter from './components/ProgressCounter.vue';\nimport AppHeader from './components/AppHeader.vue';\nexport default {\n  components: {\n    TaskItem,\n    AddTaskForm,\n    TaskFilters,\n    ProgressCounter,\n    AppHeader\n  },\n  data() {\n    return {\n      filter: 'all',\n      tasks: JSON.parse(localStorage.getItem('tasks')) || [{\n        id: 1,\n        text: 'Создайте первую задачу',\n        completed: false,\n        subtasks: []\n      }],\n      add_task: ''\n    };\n  },\n  // Остальные методы и computed остаются здесь (см. оригинал)\n  methods: {\n    createTask(text) {\n      const newId = this.tasks.length > 0 ? Math.max(...this.tasks.map(t => t.id)) + 1 : 1;\n      this.tasks.push({\n        id: newId,\n        text,\n        completed: false,\n        subtasks: []\n      });\n    }\n    // ... остальные методы\n  }\n};","map":{"version":3,"names":["TaskItem","AddTaskForm","TaskFilters","ProgressCounter","AppHeader","components","data","filter","tasks","JSON","parse","localStorage","getItem","id","text","completed","subtasks","add_task","methods","createTask","newId","length","Math","max","map","t","push"],"sources":["C:\\Users\\Pavel\\Documents\\webstorm\\todo\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div class=\"vue-cover\">\r\n    <AppHeader />\r\n    <div class=\"body\">\r\n      <TaskItem\r\n          v-for=\"task in filteredTasks\"\r\n          :key=\"task.id\"\r\n          :task=\"task\"\r\n          @delete-task=\"deleteTask\"\r\n          @check-task=\"checkTask\"\r\n      />\r\n      <AddTaskForm @add-task=\"createTask\" />\r\n    </div>\r\n    <div class=\"footer\">\r\n      <ProgressCounter :progress=\"totalProgress\" />\r\n      <TaskFilters v-model=\"filter\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport TaskItem from './components/TaskItem.vue'\r\nimport AddTaskForm from './components/AddTaskForm.vue'\r\nimport TaskFilters from './components/TaskFilters.vue'\r\nimport ProgressCounter from './components/ProgressCounter.vue'\r\nimport AppHeader from './components/AppHeader.vue'\r\n\r\nexport default {\r\n  components: { TaskItem, AddTaskForm, TaskFilters, ProgressCounter, AppHeader },\r\n  data() {\r\n    return {\r\n      filter: 'all',\r\n      tasks: JSON.parse(localStorage.getItem('tasks')) || [\r\n        { id: 1, text: 'Создайте первую задачу', completed: false, subtasks: [] }\r\n      ],\r\n      add_task: '',\r\n    }\r\n  },\r\n  // Остальные методы и computed остаются здесь (см. оригинал)\r\n  methods: {\r\n    createTask(text) {\r\n      const newId = this.tasks.length > 0 ? Math.max(...this.tasks.map(t => t.id)) + 1 : 1;\r\n      this.tasks.push({ id: newId, text, completed: false, subtasks: [] });\r\n    },\r\n    // ... остальные методы\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n/* Глобальные стили (обёртки, footer/header) */\r\n</style>\r\n\r\n<!--<template class=\"vue-cover\">-->\r\n<!--  <div class=\"header\">to do list</div>-->\r\n<!--  <div class=\"body\">-->\r\n<!--    &lt;!&ndash;  TaskList  &ndash;&gt;-->\r\n<!--    <TaskList v-bind:tasks=\"tasks\" />-->\r\n<!--    &lt;!&ndash;  AddTask  &ndash;&gt;-->\r\n<!--    <AddTask/>-->\r\n<!--  </div>-->\r\n\r\n<!--  <div class=\"footer\">-->\r\n<!--    <span class=\"footer__left\">{{ totalProgress }}</span>-->\r\n<!--    <nav class=\"footer__display-tasks\">-->\r\n<!--      <input class=\"footer__display-tasks&#45;&#45;hide\" type=\"radio\" name=\"1\" id=\"all\" v-model=\"filter\" value=\"all\" checked>-->\r\n<!--      <label class=\"footer__display-tasks&#45;&#45;visible\" for=\"all\">All</label>-->\r\n<!--      <input class=\"footer__display-tasks&#45;&#45;hide\" type=\"radio\" name=\"1\" id=\"active\" v-model=\"filter\" value=\"active\">-->\r\n<!--      <label class=\"footer__display-tasks&#45;&#45;visible\" for=\"active\">Active</label>-->\r\n<!--      <input class=\"footer__display-tasks&#45;&#45;hide\" type=\"radio\" name=\"1\" id=\"completed\" v-model=\"filter\"-->\r\n<!--             value=\"completed\">-->\r\n<!--      <label class=\"footer__display-tasks&#45;&#45;visible\" for=\"completed\">Completed</label>-->\r\n<!--    </nav>-->\r\n<!--  </div>-->\r\n<!--</template>-->\r\n\r\n<!--<script>-->\r\n<!--import AddTask from \"@/components/AddTask.vue\";-->\r\n<!--import TaskList from \"@/components/TaskList.vue\";-->\r\n<!--export default {-->\r\n<!--  components: {-->\r\n<!--    AddTask, TaskList-->\r\n<!--  },-->\r\n<!--  name: 'App',-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      filter: 'all',-->\r\n<!--      tasks: JSON.parse(localStorage.getItem('tasks')) || [-->\r\n<!--        {-->\r\n<!--          id: 1,-->\r\n<!--          text: 'Создайте первую задачу',-->\r\n<!--          completed: false,-->\r\n<!--          add_subtask: ''-->\r\n<!--        }-->\r\n<!--      ],-->\r\n<!--      add_task: '',-->\r\n<!--    }-->\r\n<!--  },-->\r\n<!--  watch: {-->\r\n<!--    tasks: {-->\r\n<!--      handler() {-->\r\n<!--        localStorage.setItem('tasks', JSON.stringify(this.tasks));-->\r\n<!--      },-->\r\n<!--      deep: true-->\r\n<!--    },-->\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    createTask() {-->\r\n<!--      if (!this.add_task?.trim()) return;-->\r\n\r\n<!--      const newId = this.tasks.length > 0-->\r\n<!--          ? Math.max(...this.tasks.map(t => t.id)) + 1-->\r\n<!--          : 1;-->\r\n\r\n<!--      this.tasks.push({-->\r\n<!--        id: newId,-->\r\n<!--        text: this.add_task.trim(),-->\r\n<!--        completed: false,-->\r\n<!--        subtasks: [],-->\r\n<!--        add_subtask: ''-->\r\n<!--      });-->\r\n\r\n<!--      this.add_task = '';-->\r\n<!--    },-->\r\n\r\n<!--    createSubtask(task) {-->\r\n<!--      if (!task.add_subtask || !task.add_subtask.trim()) return;-->\r\n\r\n<!--      const newId = task.subtasks?.length-->\r\n<!--          ? Math.max(...task.subtasks.map(s => s.id)) + 1-->\r\n<!--          : 1;-->\r\n\r\n<!--      const newSubtask = {-->\r\n<!--        id: newId,-->\r\n<!--        text: task.add_subtask.trim(),-->\r\n<!--        completed: false-->\r\n<!--      };-->\r\n\r\n<!--      if (!task.subtasks) {-->\r\n<!--        task.subtasks = [];-->\r\n<!--      }-->\r\n\r\n<!--      task.subtasks.push(newSubtask);-->\r\n\r\n<!--      task.add_subtask = '';-->\r\n<!--    },-->\r\n\r\n<!--    deleteTask(taskId) {-->\r\n<!--      const index = this.tasks.findIndex(task => task.id === taskId);-->\r\n<!--      this.tasks.splice(index, 1)-->\r\n<!--    },-->\r\n\r\n<!--    deleteSubtask(taskId, subtaskId) {-->\r\n<!--      const parentTask = this.tasks.find(task => task.id === taskId);-->\r\n<!--      const index = parentTask.subtasks.findIndex(subtask => subtask.id === subtaskId);-->\r\n<!--      parentTask.subtasks.splice(index, 1);-->\r\n<!--    },-->\r\n\r\n<!--    checkTask(task) {-->\r\n<!--      if (!task.subtasks || !Array.isArray(task.subtasks)) return-->\r\n<!--      const isTaskDone = task.completed-->\r\n<!--      task.subtasks.forEach(subtask => {-->\r\n<!--        subtask.completed = isTaskDone-->\r\n<!--      });-->\r\n<!--    },-->\r\n\r\n<!--    checkSubtask(task) {-->\r\n<!--      if (!task.subtasks || task.subtasks.length === 0) return; // Добавляем проверку-->\r\n<!--      task.completed = task.subtasks.every(subtask => subtask.completed);-->\r\n<!--    },-->\r\n<!--  },-->\r\n<!--  computed: {-->\r\n<!--    totalProgress() {-->\r\n<!--      let total = this.tasks.length-->\r\n<!--      let completed = this.tasks.filter(task => task.completed).length-->\r\n<!--      return `${completed}/${total}`-->\r\n<!--    },-->\r\n\r\n<!--    filteredTasks() {-->\r\n<!--      switch (this.filter) {-->\r\n<!--        case 'active':-->\r\n<!--          return this.tasks.filter(task => !task.completed)-->\r\n<!--        case 'completed':-->\r\n<!--          return this.tasks.filter(task => task.completed)-->\r\n<!--        default:-->\r\n<!--          return this.tasks-->\r\n<!--      }-->\r\n<!--    }-->\r\n<!--  }-->\r\n<!--}-->\r\n<!--</script>-->\r\n\r\n<!--<style>-->\r\n<!--:root {-->\r\n<!--  &#45;&#45;header-and-footer: #ffca93;-->\r\n<!--  &#45;&#45;checkbox-main-close: #ffca93;-->\r\n<!--  &#45;&#45;header-maintask: #ffdfbe;-->\r\n<!--  &#45;&#45;checkbox-main: #feb567;-->\r\n<!--  &#45;&#45;subtask: #ffecd8;-->\r\n<!--}-->\r\n\r\n<!--#app {-->\r\n<!--  max-width: 500px;-->\r\n<!--  font-family: Avenir, Helvetica, Arial, sans-serif;-->\r\n<!--  -webkit-font-smoothing: antialiased;-->\r\n<!--  -moz-osx-font-smoothing: grayscale;-->\r\n<!--  text-align: center;-->\r\n<!--  color: #2c3e50;-->\r\n<!--  margin-inline: auto;-->\r\n<!--  z-index: 10;-->\r\n<!--  max-height: 90vh;-->\r\n<!--  display: flex;-->\r\n<!--  flex-direction: column;-->\r\n<!--}-->\r\n\r\n<!--.header,-->\r\n<!--.footer {-->\r\n<!--  background-color: var(&#45;&#45;header-and-footer);-->\r\n<!--  padding-block: 11px;-->\r\n<!--  padding-inline: 30px;-->\r\n<!--  flex-shrink: 0;-->\r\n<!--}-->\r\n\r\n<!--.header {-->\r\n<!--  font-family: \"Open Sans\", sans-serif;-->\r\n<!--  font-weight: 600;-->\r\n<!--  font-size: 20px;-->\r\n<!--  line-height: 140%;-->\r\n<!--  text-align: center;-->\r\n<!--  color: #7f4b13;-->\r\n<!--}-->\r\n\r\n<!--.body {-->\r\n<!--  font-weight: 400;-->\r\n<!--  font-size: 20px;-->\r\n<!--  line-height: 140%;-->\r\n<!--  text-align: center;-->\r\n<!--  display: flex;-->\r\n<!--  flex-direction: column;-->\r\n<!--  gap: 25px;-->\r\n<!--  padding: 30px;-->\r\n<!--  background-color: #FFF4E9;-->\r\n<!--  overflow-y: auto;-->\r\n<!--}-->\r\n\r\n<!--.task {-->\r\n<!--  width: 100%;-->\r\n<!--  border-radius: 10px;-->\r\n<!--  overflow: hidden;-->\r\n<!--  border: 2px solid var(&#45;&#45;header-maintask);-->\r\n<!--  flex-shrink: 0;-->\r\n<!--}-->\r\n\r\n<!--.task__main {-->\r\n<!--  margin-inline: auto;-->\r\n<!--  padding: 13px 20px;-->\r\n<!--  display: flex;-->\r\n<!--  align-items: center;-->\r\n<!--  gap: 23px;-->\r\n<!--  justify-content: space-between;-->\r\n<!--  background-color: var(&#45;&#45;header-maintask);-->\r\n<!--  color: #7f4b13;-->\r\n<!--}-->\r\n\r\n<!--.task__main&#45;&#45;span {-->\r\n<!--  margin-right: auto;-->\r\n<!--}-->\r\n\r\n<!--.task__main&#45;&#45;delete {-->\r\n<!--  background-color: transparent;-->\r\n<!--  width: 24px;-->\r\n<!--  aspect-ratio: 1;-->\r\n<!--  display: flex;-->\r\n<!--}-->\r\n\r\n\r\n\r\n<!--.task__main&#45;&#45;checkbox&#45;&#45;hide {-->\r\n<!--  display: none;-->\r\n<!--}-->\r\n\r\n<!--.task__main&#45;&#45;checkbox&#45;&#45;visible {-->\r\n<!--  height: 24px;-->\r\n<!--  aspect-ratio: 1;-->\r\n<!--  border: 2px var(&#45;&#45;checkbox-main) solid;-->\r\n<!--  border-radius: 5px;-->\r\n<!--}-->\r\n\r\n<!--.task__main&#45;&#45;delete svg {-->\r\n<!--  justify-content: center;-->\r\n<!--  align-items: center;-->\r\n<!--}-->\r\n\r\n<!--.task__main&#45;&#45;delete:hover svg path {-->\r\n<!--  stroke: #fc8f1a;-->\r\n<!--}-->\r\n\r\n<!--.task__main&#45;&#45;checkbox&#45;&#45;hide:checked+.task__main&#45;&#45;checkbox&#45;&#45;visible {-->\r\n<!--  background: url('assets/checked.svg') center/14px no-repeat;-->\r\n<!--  background-color: var(&#45;&#45;checkbox-main);-->\r\n\r\n<!--}-->\r\n\r\n<!--.task__main&#45;&#45;checkbox&#45;&#45;hide:checked~.task__main&#45;&#45;span {-->\r\n<!--  text-decoration: line-through;-->\r\n<!--}-->\r\n\r\n<!--.footer__display-tasks {-->\r\n<!--  display: flex;-->\r\n<!--  align-items: center;-->\r\n<!--  gap: 10px;-->\r\n<!--}-->\r\n\r\n<!--.footer__display-tasks&#45;&#45;visible {-->\r\n<!--  padding: 3px 10px;-->\r\n<!--  border: 1px solid transparent;-->\r\n<!--  border-radius: 10px;-->\r\n<!--}-->\r\n\r\n<!--.footer__display-tasks&#45;&#45;hide {-->\r\n<!--  display: none;-->\r\n<!--}-->\r\n\r\n<!--.footer__display-tasks&#45;&#45;hide:checked+.footer__display-tasks&#45;&#45;visible {-->\r\n<!--  border-color: rgba(127, 75, 19, 0.42);-->\r\n<!--}-->\r\n\r\n<!--.footer {-->\r\n<!--  padding-block: 8px;-->\r\n<!--  display: flex;-->\r\n<!--  gap: 30px;-->\r\n<!--  align-items: center;-->\r\n<!--  justify-content: space-between;-->\r\n<!--  color: rgba(127, 75, 19, 0.42);-->\r\n<!--  font-weight: 600;-->\r\n<!--  font-size: 20px;-->\r\n<!--  line-height: 140%;-->\r\n<!--}-->\r\n\r\n<!--.add-main-task {-->\r\n<!--  width: 100%;-->\r\n<!--  /* border: 1px red solid; */-->\r\n<!--  overflow: hidden;-->\r\n<!--  position: relative;-->\r\n<!--  flex-shrink: 0;-->\r\n<!--}-->\r\n\r\n<!--.add-main-task__input {-->\r\n<!--  /* display: block; */-->\r\n<!--  padding: 11px;-->\r\n<!--  background-color: #ffecd8;-->\r\n<!--  border-radius: 10px;-->\r\n<!--  font-family: \"Inter\", sans-serif;-->\r\n<!--  font-weight: 400;-->\r\n<!--  font-size: 20px;-->\r\n<!--  line-height: 140%;-->\r\n<!--  text-align: left;-->\r\n<!--  border: 1.50px dashed #ffca93;-->\r\n<!--  color: #7f4b13;-->\r\n<!--  padding-inline: 20px 55px;-->\r\n<!--  /* box-sizing: content-box; */-->\r\n<!--  /* max-width: 100%; */-->\r\n<!--  width: 100%;-->\r\n<!--}-->\r\n\r\n<!--.add-main-task__input::placeholder {-->\r\n<!--  color: #ffca93;-->\r\n<!--  text-align: center;-->\r\n<!--}-->\r\n\r\n<!--.add-main-task__button {-->\r\n<!--  position: absolute;-->\r\n<!--  display: none;-->\r\n<!--  align-items: center;-->\r\n<!--  justify-content: center;-->\r\n<!--  height: 24px;-->\r\n<!--  aspect-ratio: 1;-->\r\n<!--  /* box-sizing: content-box; */-->\r\n<!--  top: 50%;-->\r\n<!--  transform: translateY(-50%);-->\r\n<!--  right: 20px;-->\r\n<!--  background-color: transparent;-->\r\n<!--  border: 2px var(&#45;&#45;checkbox-main) solid;-->\r\n<!--  border-radius: 5px;-->\r\n<!--}-->\r\n\r\n<!--.add-main-task__input:not(:placeholder-shown)+.add-main-task__button {-->\r\n<!--  display: flex;-->\r\n<!--}-->\r\n\r\n\r\n\r\n<!--.add-main-task__button::after {-->\r\n<!--  content: '+';-->\r\n<!--  color: var(&#45;&#45;checkbox-main);-->\r\n<!--  font-size: 20px;-->\r\n<!--}-->\r\n\r\n<!--.add-subtask {-->\r\n<!--  background-color: #FFECD7;-->\r\n<!--  width: 100%;-->\r\n<!--  position: relative;-->\r\n<!--  display: flex;-->\r\n<!--  align-items: center;-->\r\n<!--  gap: 23px;-->\r\n<!--  padding-inline: 20px;-->\r\n<!--  padding-right: 60px;-->\r\n<!--}-->\r\n\r\n<!--.add-subtask button {-->\r\n<!--  background-color: transparent;-->\r\n<!--  height: 24px;-->\r\n<!--  aspect-ratio: 1;-->\r\n<!--  font-weight: 400;-->\r\n<!--  font-size: 20px;-->\r\n<!--  color: var(&#45;&#45;checkbox-main);-->\r\n<!--  border: 2px solid var(&#45;&#45;checkbox-main);-->\r\n<!--  display: flex;-->\r\n<!--  align-items: center;-->\r\n<!--  justify-content: center;-->\r\n<!--  border-radius: 5px;-->\r\n<!--}-->\r\n\r\n<!--.add-subtask input {-->\r\n<!--  padding-block: 11px;-->\r\n<!--  background-color: transparent;-->\r\n<!--  font-family: \"Inter\", sans-serif;-->\r\n<!--  font-weight: 400;-->\r\n<!--  font-size: 20px;-->\r\n<!--  line-height: 140%;-->\r\n<!--  text-align: left;-->\r\n<!--  color: #7f4b13;-->\r\n<!--  width: 100%;-->\r\n<!--}-->\r\n\r\n<!--.add-subtask input::placeholder {-->\r\n<!--  color: #ffca93;-->\r\n<!--}-->\r\n\r\n<!--.task__subtask {-->\r\n<!--  background-color: #FFECD7;-->\r\n<!--  color: #7f4b13;-->\r\n<!--  padding-block: 11px;-->\r\n<!--  display: flex;-->\r\n<!--  justify-content: space-between;-->\r\n<!--  align-items: center;-->\r\n<!--  padding-inline: 20px;-->\r\n<!--  gap: 23px;-->\r\n<!--  border-bottom: 1px solid var(&#45;&#45;header-maintask);-->\r\n<!--}-->\r\n\r\n<!--.task__subtask input {-->\r\n<!--  display: none;-->\r\n<!--}-->\r\n\r\n<!--.task__subtask span {-->\r\n<!--  margin-right: auto;-->\r\n<!--}-->\r\n\r\n<!--.task__subtask label {-->\r\n<!--  /* background-color: transparent; */-->\r\n<!--  border: 2px solid var(&#45;&#45;checkbox-main-close);-->\r\n<!--  height: 24px;-->\r\n<!--  aspect-ratio: 1;-->\r\n<!--  font-weight: 400;-->\r\n<!--  font-size: 20px;-->\r\n<!--  border-radius: 5px;-->\r\n<!--}-->\r\n\r\n<!--.task__subtask input:checked+label {-->\r\n<!--  background: url('assets/checked.svg') center/14px no-repeat;-->\r\n<!--  background-color: var(&#45;&#45;checkbox-main-close);-->\r\n<!--}-->\r\n\r\n<!--.task__subtask input:checked~span {-->\r\n<!--  text-decoration: line-through;-->\r\n<!--}-->\r\n\r\n<!--.task__subtask button {-->\r\n<!--  height: 24px;-->\r\n<!--  aspect-ratio: 1;-->\r\n<!--  background-color: transparent;-->\r\n<!--}-->\r\n\r\n<!--.task__subtask button:hover {-->\r\n<!--  svg {-->\r\n<!--    path {-->\r\n<!--      stroke: #fc8f1a;-->\r\n<!--    }-->\r\n<!--  }-->\r\n<!--}-->\r\n<!--</style>-->"],"mappings":";;;AAqBA,OAAOA,QAAO,MAAO,2BAA0B;AAC/C,OAAOC,WAAU,MAAO,8BAA6B;AACrD,OAAOC,WAAU,MAAO,8BAA6B;AACrD,OAAOC,eAAc,MAAO,kCAAiC;AAC7D,OAAOC,SAAQ,MAAO,4BAA2B;AAEjD,eAAe;EACbC,UAAU,EAAE;IAAEL,QAAQ;IAAEC,WAAW;IAAEC,WAAW;IAAEC,eAAe;IAAEC;EAAU,CAAC;EAC9EE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,KAAK;MACbC,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,KAAK,CAClD;QAAEC,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,wBAAwB;QAAEC,SAAS,EAAE,KAAK;QAAEC,QAAQ,EAAE;MAAG,EACzE;MACDC,QAAQ,EAAE;IACZ;EACF,CAAC;EACD;EACAC,OAAO,EAAE;IACPC,UAAUA,CAACL,IAAI,EAAE;MACf,MAAMM,KAAI,GAAI,IAAI,CAACZ,KAAK,CAACa,MAAK,GAAI,IAAIC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACf,KAAK,CAACgB,GAAG,CAACC,CAAA,IAAKA,CAAC,CAACZ,EAAE,CAAC,IAAI,IAAI,CAAC;MACpF,IAAI,CAACL,KAAK,CAACkB,IAAI,CAAC;QAAEb,EAAE,EAAEO,KAAK;QAAEN,IAAI;QAAEC,SAAS,EAAE,KAAK;QAAEC,QAAQ,EAAE;MAAG,CAAC,CAAC;IACtE;IACA;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}